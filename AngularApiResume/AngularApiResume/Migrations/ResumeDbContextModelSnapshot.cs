// <auto-generated />
using System;
using AngularApiResume.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AngularApiResume.Migrations
{
    [DbContext(typeof(ResumeDbContext))]
    partial class ResumeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AngularApiResume.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactMobileNo");

                    b.Property<DateTime?>("Createdate");

                    b.Property<string>("FirstEmail");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            CandidateId = 1,
                            ContactMobileNo = "01687260391",
                            Createdate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstEmail = "tanbinislam1996@gmail.com",
                            UpdateDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AngularApiResume.Models.CareerInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId");

                    b.Property<string>("CompanyBusiness");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Department");

                    b.Property<string>("Designation");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("Startdate");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Careers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            CompanyBusiness = "IT",
                            CompanyName = "SA Ltd",
                            Department = "Management",
                            Designation = "Senior",
                            EndDate = new DateTime(2019, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Startdate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AngularApiResume.Models.EducationalInfomation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId");

                    b.Property<int?>("Duration");

                    b.Property<string>("ExamName");

                    b.Property<string>("InstituteName");

                    b.Property<string>("LavelOfEducation");

                    b.Property<string>("MajorSubject");

                    b.Property<string>("Result");

                    b.Property<string>("YearOfPassing");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Educationals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            Duration = 4,
                            ExamName = "BBA",
                            InstituteName = "Lalmatia Women's College",
                            LavelOfEducation = "BBA",
                            MajorSubject = "Mamagement",
                            Result = "3.12",
                            YearOfPassing = "2017"
                        });
                });

            modelBuilder.Entity("AngularApiResume.Models.PersonalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("FatherName");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MotherName");

                    b.Property<string>("PermanentAddress");

                    b.Property<string>("PresentAddress");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Personals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            DateOfBirth = new DateTime(1996, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Abdul Goni Serniabat",
                            FirstName = "TanBin",
                            Gender = "Female",
                            LastName = "Islam",
                            MaritalStatus = "Single",
                            MotherName = "Rehana Begum",
                            PermanentAddress = "West sujon khathi,Agailjhara,Borishal",
                            PresentAddress = "Mohammadpur,Dhaka"
                        });
                });

            modelBuilder.Entity("AngularApiResume.Models.RefereeInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CandidateId");

                    b.Property<string>("Designation");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("Organization");

                    b.Property<string>("Relation");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Referees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Dhaka",
                            CandidateId = 1,
                            Designation = "Instractor",
                            Email = "nishat@gmail.com",
                            Mobile = "012365478",
                            Name = "Nishat Sarmeen",
                            Organization = "IsDB",
                            Relation = "Teacher"
                        });
                });

            modelBuilder.Entity("AngularApiResume.Models.TrainingInfornation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId");

                    b.Property<string>("Country");

                    b.Property<string>("Duration");

                    b.Property<string>("Institute");

                    b.Property<string>("Location");

                    b.Property<string>("TopicsCoverd");

                    b.Property<string>("TrainingTitle");

                    b.Property<string>("TrainingYear");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Trainings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            Country = "Bangladesh",
                            Duration = "1",
                            Institute = "IsDB",
                            Location = "Dhaka",
                            TopicsCoverd = "CSharp",
                            TrainingTitle = "IT",
                            TrainingYear = "2019"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AngularApiResume.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("AngularApiResume.Models.CareerInformation", b =>
                {
                    b.HasOne("AngularApiResume.Models.Candidate", "Candidate")
                        .WithMany("CareerInformations")
                        .HasForeignKey("CandidateId");
                });

            modelBuilder.Entity("AngularApiResume.Models.EducationalInfomation", b =>
                {
                    b.HasOne("AngularApiResume.Models.Candidate", "Candidate")
                        .WithMany("EducationalInfomations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngularApiResume.Models.PersonalInformation", b =>
                {
                    b.HasOne("AngularApiResume.Models.Candidate", "Candidate")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngularApiResume.Models.RefereeInformation", b =>
                {
                    b.HasOne("AngularApiResume.Models.Candidate", "Candidate")
                        .WithMany("RefereeInformations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngularApiResume.Models.TrainingInfornation", b =>
                {
                    b.HasOne("AngularApiResume.Models.Candidate", "Candidate")
                        .WithMany("TrainingInfornations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
